package com.sunset.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.song.sunset.comic.bean.ComicLocalCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMIC_LOCAL_COLLECTION".
*/
public class ComicLocalCollectionDao extends AbstractDao<ComicLocalCollection, Long> {

    public static final String TABLENAME = "COMIC_LOCAL_COLLECTION";

    /**
     * Properties of entity ComicLocalCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cover = new Property(0, String.class, "cover", false, "COVER");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ComicId = new Property(2, long.class, "comicId", true, "_id");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property ChapterNum = new Property(5, String.class, "chapterNum", false, "CHAPTER_NUM");
    }


    public ComicLocalCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public ComicLocalCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMIC_LOCAL_COLLECTION\" (" + //
                "\"COVER\" TEXT," + // 0: cover
                "\"NAME\" TEXT," + // 1: name
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 2: comicId
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"AUTHOR\" TEXT," + // 4: author
                "\"CHAPTER_NUM\" TEXT);"); // 5: chapterNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMIC_LOCAL_COLLECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ComicLocalCollection entity) {
        stmt.clearBindings();
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(1, cover);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getComicId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String chapterNum = entity.getChapterNum();
        if (chapterNum != null) {
            stmt.bindString(6, chapterNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ComicLocalCollection entity) {
        stmt.clearBindings();
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(1, cover);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getComicId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String chapterNum = entity.getChapterNum();
        if (chapterNum != null) {
            stmt.bindString(6, chapterNum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 2);
    }    

    @Override
    public ComicLocalCollection readEntity(Cursor cursor, int offset) {
        ComicLocalCollection entity = new ComicLocalCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cover
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2), // comicId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // chapterNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ComicLocalCollection entity, int offset) {
        entity.setCover(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComicId(cursor.getLong(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChapterNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ComicLocalCollection entity, long rowId) {
        entity.setComicId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ComicLocalCollection entity) {
        if(entity != null) {
            return entity.getComicId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ComicLocalCollection entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
